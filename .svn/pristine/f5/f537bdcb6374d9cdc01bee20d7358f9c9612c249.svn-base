package com.takebox.wedding;

import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.Menu;
import android.widget.Toast;

import com.facebook.LoggingBehavior;
import com.facebook.Session;
import com.facebook.Settings;
import com.google.analytics.tracking.android.EasyTracker;
import com.google.android.gcm.GCMRegistrar;
import com.takebox.wedding.info.Info;
import com.takebox.wedding.info.User;
import com.takebox.wedding.model.MemberModel;

public class HttpExceptionActivity extends Activity{

	public Handler exceptionHandler;

	public final static int HTTP_ERROR = 880216;
	public final static int LOGOUT_MSG = 880023;

	public ProgressDialog pd = null;
	
	public void onCreate(Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		exceptionHandler = new Handler(){
			public void handleMessage(Message msg){
				if(msg.arg1 == HTTP_ERROR){
					warningHTTPErrorMsgDialog();
				}else if(msg.arg1 == LOGOUT_MSG){
					logoutProcess();
					baseToast("다시 로그인해주세요.");
				}
			}
		};
	}
	
	public void goToInitialAppInfo(String kind){
		Intent intent = new Intent(this, InitialAppInfoActivity.class);
		intent.putExtra("kindOfActivity", kind);
		startActivity(intent);
	}
	
	private void registGCM() {

		if(!Info.GCM_CODE.isEmpty()) return;
		try{
			GCMRegistrar.checkDevice(this);
			GCMRegistrar.checkManifest(this);
			final String regId = GCMRegistrar.getRegistrationId(this);
			System.out.println("***************** regId ***************** : " + regId);
			if("".equals(regId)){   //구글 가이드에는 regId.equals("")로 되어 있는데 Exception을 피하기 위해 수정
				GCMRegistrar.register(this, com.takebox.wedding.GCMIntentService.SEND_ID);
				String regId2 = GCMRegistrar.getRegistrationId(this);
				System.out.println("***************** regId2 ***************** : " + regId2);
				Info.GCM_CODE = regId2;
			}else{
				Info.GCM_CODE = regId;
			}
		}catch(Exception e){

		}
		System.out.println("GCM_CODE " + Info.GCM_CODE);
	}
	
	public void reLogin(){
		if(pd!=null){
			if(pd.isShowing())
				pd.dismiss();
		}
		Thread th = null;
		reLoginParse(th, login);
	}
	public final Runnable login = new Runnable() {
		@Override
		public void run() {
			login();
		}
	};
	public final Runnable logout = new Runnable() {
		@Override
		public void run() {
			logout();
		}
	};
	
	
	public void gcmCodeCheck(){
		if(Info.GCM_CODE==null){
			Info.GCM_CODE="";
		}
		
		if(Info.GCM_CODE.isEmpty()){
			Info.GCM_CODE = Info.GCM_REG_ID;
		}
	}
	
	
	public boolean deviceLoginInfoCheck(){
		String email = User.getUserInfo("ID", this);
		String pwd =  User.getUserInfo("PW", this);
		
//		로그아웃 시킨다
		if(email.compareTo("")==0||email.length()==0){
			Thread th = null;
			reLoginParse(th, logout);
			return false;
		}else{
			return true;
		}
	}
	
	
	protected void login() {
		// TODO Auto-generated method stub
		Map<String, String> data = new HashMap<String,String>();
		
		if(!deviceLoginInfoCheck()){
			return;
		}
		
		
		String email = User.getUserInfo("ID", this);
		String pwd =  User.getUserInfo("PW", this);
		
		data.put("j_username",email);
		data.put("j_password", pwd);
		
		//GCM
		gcmCodeCheck();
		data.put("device_id", Info.GCM_CODE);

		JSONObject obj = MemberModel.procMemberLogin(data);
		if(!isHttpWorthCheck(obj)){
			if(pd.isShowing())
				pd.dismiss();
			return;
		}else{
			try {
				if(obj.getString("info").equals("session-out")){
					reLogin();
					return;
				}
			}catch(JSONException e) {
				e.printStackTrace();
			}
		}
		
		try {
			String info = obj.getString("info");
			//에러코드 확인
			if(info.equals("ok")){
				//성공
				
				Intent intent = new Intent(this, RoomListActivity.class);
				startActivity(intent);
				finish();
			//	AlertDialog dialog = AlertDialogBuilder.pop_ok(this, "다시 확인해 주세요.").create();
			//	dialog.show();
//			handler.sendEmptyMessage(0);
			}else if(info.equals("fail")){
				//실패
				finish();
//				handler.sendEmptyMessage(1);
			}
			return;

		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	public void logoutProcess(){
		if(pd!=null) pd.cancel();
		//로그아웃 됨.
		
		//정보 삭제
		Map<String,String> data = new HashMap<String,String>();
		
		data.put("ID", "");
		data.put("PW", "");
		data.put("LOGIN_YN", "");
		data.put("JSESSIONID", "");
		
		User.setUserInfo(data, HttpExceptionActivity.this);
		
		Info.JSESSIONID = "";
		Info.GCM_REG_ID = "";
		
		Intent intent = new Intent(HttpExceptionActivity.this, StartActivity.class);
		intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP|Intent.FLAG_ACTIVITY_SINGLE_TOP);
		startActivity(intent);

		finish();
		overridePendingTransition(0, 0);
	}
	
	
	
	//로그아웃
	protected void logout() {
		// TODO Auto-generated method stub
		String res = MemberModel.procMemberLogout(null);
		if(res==null){
			if(pd.isShowing())
				pd.dismiss();
			return;
		}
		//페이스북 로그아웃
		Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
		Session session = Session.getActiveSession();	
		if(session != null){
			session.closeAndClearTokenInformation();
		}
		//성공
		Message msg = new Message();
		msg.arg1 = HttpExceptionActivity.LOGOUT_MSG;
		
		exceptionHandler.sendMessage(msg);
	}	
	
	
	public void warningHTTPErrorMsgDialog(){
		AlertDialog.Builder builder = new AlertDialog.Builder(HttpExceptionActivity.this); 
		// 여기서 부터는 알림창의 속성 설정
		builder.setTitle("")        // 제목 설정
		.setMessage("통신상태가 불안하여 웨딩박스 서비스에 연결할 수 없습니다. 재접속 해주세요.")        // 메세지 설정
		.setCancelable(true)       
		.setNegativeButton("확인", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();
				activityFinish();
			}
		});
		AlertDialog dialog = builder.create();
		dialog.show();
	}
	
	public void baseToast(String msg){
		Toast toast = Toast.makeText(getApplicationContext(), msg, 500);
		toast.show();
	}
	
	public void baseDialog(String msg){
		AlertDialog.Builder builder = new AlertDialog.Builder(HttpExceptionActivity.this); 
		// 여기서 부터는 알림창의 속성 설정
		builder.setTitle("")        // 제목 설정
		.setMessage(msg)        // 메세지 설정
		.setCancelable(true)       
		.setNegativeButton("확인", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();
			}
		});
		AlertDialog dialog = builder.create();
		dialog.show();
	}
	

	public void activityFinish(){
		finish();
	}
	
	public boolean isHttpWorthCheck(JSONObject obj){
		if(obj==null){
			Message msg = new Message();
			msg.arg1 = HttpExceptionActivity.HTTP_ERROR;
			exceptionHandler.sendMessage(msg);
			return false;
		}else{
			return true;
		}
	}
	
	public void reLoginParse(Thread thread, Runnable runnable) {
		thread = new Thread(runnable);
		thread.start();
	}
	
	public void processParsing(Thread thread, Runnable runnable) {
		pd = new ProgressDialog(this);
		pd.setProgressStyle(ProgressDialog.STYLE_SPINNER);
		pd.setTitle(null);
		pd.setCancelable(false);
		pd.setMessage("로드중...");
		//		pd.setButton("���", new DialogInterface.OnClickListener() {
		//			public void onClick(DialogInterface dialog, int which) {
		//				threadStop();
		//				dialog.cancel();
		//			}
		//		});
		pd.show();

		thread = new Thread(runnable);
		thread.start();
	}
	
	public static boolean sns_img_check(String img_name){
		//페이스북, 카카오톡, 구글플러스, 네이버
		if(img_name.contains("facebook") || img_name.contains("kakao") || img_name.contains("google") || img_name.contains("pstatic")){
			return true;
		} else {
			return false;
		}
	}
	
	@Override
	public void onStart() {
		super.onStart();
		//analytics 분석도구 
		EasyTracker.getInstance(this).activityStart(this);  // Add this method.
	}

	@Override
	public void onStop() {
		super.onStop();
		//analytics 분석도구 
		EasyTracker.getInstance(this).activityStop(this);  // Add this method.

	}
	
	 @Override
	  public boolean onCreateOptionsMenu(Menu menu) {
		 
	   return true;
	  }
}
